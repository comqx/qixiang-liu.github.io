<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Mr.Liu World</title>
    <link>https://qixiang-liu.github.io/post/</link>
    <description>Recent content in Posts on Mr.Liu World</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Wed, 11 Dec 2019 10:27:49 +0800</lastBuildDate>
    
	<atom:link href="https://qixiang-liu.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>常量和变量</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-12-11-%E5%B8%B8%E9%87%8F%E5%92%8C%E5%8F%98%E9%87%8F/</link>
      <pubDate>Wed, 11 Dec 2019 10:27:49 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-12-11-%E5%B8%B8%E9%87%8F%E5%92%8C%E5%8F%98%E9%87%8F/</guid>
      <description></description>
    </item>
    
    <item>
      <title>数据类型之间转换</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-12-11-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E9%97%B4%E8%BD%AC%E6%8D%A2/</link>
      <pubDate>Wed, 11 Dec 2019 10:27:42 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-12-11-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E4%B9%8B%E9%97%B4%E8%BD%AC%E6%8D%A2/</guid>
      <description></description>
    </item>
    
    <item>
      <title>map数据结构</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-12-11-map%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</link>
      <pubDate>Wed, 11 Dec 2019 10:27:32 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-12-11-map%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</guid>
      <description></description>
    </item>
    
    <item>
      <title>并发安全锁与原子操作</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-12-11-%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E9%94%81%E4%B8%8E%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Wed, 11 Dec 2019 10:27:29 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-12-11-%E5%B9%B6%E5%8F%91%E5%AE%89%E5%85%A8%E9%94%81%E4%B8%8E%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C/</guid>
      <description></description>
    </item>
    
    <item>
      <title>golang中使用json的技巧</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-12-11-golang%E4%B8%AD%E4%BD%BF%E7%94%A8json%E7%9A%84%E6%8A%80%E5%B7%A7/</link>
      <pubDate>Wed, 11 Dec 2019 09:20:26 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-12-11-golang%E4%B8%AD%E4%BD%BF%E7%94%A8json%E7%9A%84%E6%8A%80%E5%B7%A7/</guid>
      <description></description>
    </item>
    
    <item>
      <title>小坑整理</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-12-07-%E5%B0%8F%E5%9D%91%E6%95%B4%E7%90%86/</link>
      <pubDate>Sat, 07 Dec 2019 11:05:34 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-12-07-%E5%B0%8F%E5%9D%91%E6%95%B4%E7%90%86/</guid>
      <description></description>
    </item>
    
    <item>
      <title>接口</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-12-07-%E6%8E%A5%E5%8F%A3/</link>
      <pubDate>Sat, 07 Dec 2019 11:04:58 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-12-07-%E6%8E%A5%E5%8F%A3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>反射</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-11-29-%E5%8F%8D%E5%B0%84/</link>
      <pubDate>Fri, 29 Nov 2019 15:03:07 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-11-29-%E5%8F%8D%E5%B0%84/</guid>
      <description></description>
    </item>
    
    <item>
      <title>docker原理</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-11-22-docker%E5%8E%9F%E7%90%86/</link>
      <pubDate>Fri, 22 Nov 2019 09:45:58 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-11-22-docker%E5%8E%9F%E7%90%86/</guid>
      <description></description>
    </item>
    
    <item>
      <title>golang相关</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-11-12-golang%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Tue, 12 Nov 2019 11:01:09 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-11-12-golang%E7%9B%B8%E5%85%B3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>开发相关</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-11-06-%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Wed, 06 Nov 2019 22:17:09 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-11-06-%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>context的使用</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-11-06-context%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 06 Nov 2019 15:40:19 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-11-06-context%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;前言：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;go标准库的context是一个可以主动关闭gorouting的一个模块&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>k8s原理</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-31-k8s%E5%8E%9F%E7%90%86/</link>
      <pubDate>Thu, 31 Oct 2019 17:08:21 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-31-k8s%E5%8E%9F%E7%90%86/</guid>
      <description></description>
    </item>
    
    <item>
      <title>函数基础</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-30-%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/</link>
      <pubDate>Wed, 30 Oct 2019 21:31:24 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-30-%E5%87%BD%E6%95%B0%E5%9F%BA%E7%A1%80/</guid>
      <description></description>
    </item>
    
    <item>
      <title>goroutine和channel练习题</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-30-goroutine%E5%92%8Cchannel%E7%BB%83%E4%B9%A0%E9%A2%98/</link>
      <pubDate>Wed, 30 Oct 2019 21:26:19 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-30-goroutine%E5%92%8Cchannel%E7%BB%83%E4%B9%A0%E9%A2%98/</guid>
      <description></description>
    </item>
    
    <item>
      <title>goroutine原理</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-30-goroutine%E5%8E%9F%E7%90%86/</link>
      <pubDate>Wed, 30 Oct 2019 20:52:53 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-30-goroutine%E5%8E%9F%E7%90%86/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;前言：Go语言在语言层面实现并发。Go编写一个并发编程程序很简单，只需要在函数调用之前使用一个&lt;code&gt;go&lt;/code&gt;关键字即可启动一个goroutine执行并发。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;虽然使用一个&lt;code&gt;go&lt;/code&gt;关键字即可实现并发编程，但是是这个关键字的背后的实现非常复杂。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>goroutine与GMP模型</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-30-goroutine%E4%B8%8EGMP%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Wed, 30 Oct 2019 20:52:28 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-30-goroutine%E4%B8%8EGMP%E6%A8%A1%E5%9E%8B/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;前言：Go语言在语言层面实现并发。Go编写一个并发编程程序很简单，只需要在函数调用之前使用一个&lt;code&gt;go&lt;/code&gt;关键字即可启动一个goroutine执行并发。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;虽然使用一个&lt;code&gt;go&lt;/code&gt;关键字即可实现并发编程，但是是这个关键字的背后的实现非常复杂。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>gorouting和channel类型</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-30-gorouting%E5%92%8Cchannel%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Wed, 30 Oct 2019 20:13:55 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-30-gorouting%E5%92%8Cchannel%E7%B1%BB%E5%9E%8B/</guid>
      <description>&lt;p&gt;并发和并行的区别：&lt;/p&gt;

&lt;p&gt;​   并发：同一时间段内执行多个任务&lt;/p&gt;

&lt;p&gt;​   并行：同一时刻执行多个任务&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>5-gin会话控制cookie和session</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-30-5-gin%E4%BC%9A%E8%AF%9D%E6%8E%A7%E5%88%B6cookie%E5%92%8Csession/</link>
      <pubDate>Wed, 30 Oct 2019 16:09:34 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-30-5-gin%E4%BC%9A%E8%AF%9D%E6%8E%A7%E5%88%B6cookie%E5%92%8Csession/</guid>
      <description></description>
    </item>
    
    <item>
      <title>go操作mysql</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-30-go%E6%93%8D%E4%BD%9Cmysql/</link>
      <pubDate>Wed, 30 Oct 2019 16:06:07 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-30-go%E6%93%8D%E4%BD%9Cmysql/</guid>
      <description>&lt;p&gt;​       go的标准库database/sql包提供了保证sql或者类sql数据库的通用接口，但是没有提供具体数据库的驱动。因此使用database/sql包的时候必须注入至少一个数据库驱动&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>4-gin中间件</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-30-4-gin%E4%B8%AD%E9%97%B4%E4%BB%B6/</link>
      <pubDate>Wed, 30 Oct 2019 15:25:27 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-30-4-gin%E4%B8%AD%E9%97%B4%E4%BB%B6/</guid>
      <description></description>
    </item>
    
    <item>
      <title>time标准库的使用</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-30-time%E6%A0%87%E5%87%86%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Wed, 30 Oct 2019 14:52:50 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-30-time%E6%A0%87%E5%87%86%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>linux相关</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-29-linux%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Tue, 29 Oct 2019 13:10:53 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-29-linux%E7%9B%B8%E5%85%B3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>python相关</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-29-python%E7%9B%B8%E5%85%B3/</link>
      <pubDate>Tue, 29 Oct 2019 13:09:31 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-29-python%E7%9B%B8%E5%85%B3/</guid>
      <description>django请求的流程</description>
    </item>
    
    <item>
      <title>3-gin渲染</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-28-3-gin%E6%B8%B2%E6%9F%93/</link>
      <pubDate>Mon, 28 Oct 2019 23:06:40 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-28-3-gin%E6%B8%B2%E6%9F%93/</guid>
      <description></description>
    </item>
    
    <item>
      <title>6-gin操作数据库</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-28-6-gin%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
      <pubDate>Mon, 28 Oct 2019 22:24:07 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-28-6-gin%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
      <description></description>
    </item>
    
    <item>
      <title>2-gin数据解析和绑定</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-28-2-gin%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90%E5%92%8C%E7%BB%91%E5%AE%9A/</link>
      <pubDate>Mon, 28 Oct 2019 22:23:40 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-28-2-gin%E6%95%B0%E6%8D%AE%E8%A7%A3%E6%9E%90%E5%92%8C%E7%BB%91%E5%AE%9A/</guid>
      <description></description>
    </item>
    
    <item>
      <title>1-gin入门和路由</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-28-1-gin%E5%85%A5%E9%97%A8%E5%92%8C%E8%B7%AF%E7%94%B1/</link>
      <pubDate>Mon, 28 Oct 2019 22:23:34 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-28-1-gin%E5%85%A5%E9%97%A8%E5%92%8C%E8%B7%AF%E7%94%B1/</guid>
      <description></description>
    </item>
    
    <item>
      <title>etcd原理</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-22-etcd%E5%8E%9F%E7%90%86/</link>
      <pubDate>Tue, 22 Oct 2019 16:32:53 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-22-etcd%E5%8E%9F%E7%90%86/</guid>
      <description></description>
    </item>
    
    <item>
      <title>grpc通信</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-20-grpc%E9%80%9A%E4%BF%A1/</link>
      <pubDate>Sun, 20 Oct 2019 21:08:38 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-20-grpc%E9%80%9A%E4%BF%A1/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;摘要: 总体上来说，HTTP每次请求比较浪费资源的。虽然HTTP也是走在TCP上面的，但是HTTP请求自己添加了很多自己的信息，因此会消耗带宽资源。所以一些公司就是用RPC作为内部应用的通信协议。&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>tcp客户端与服务端</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-19-tcp%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF/</link>
      <pubDate>Sat, 19 Oct 2019 12:16:45 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-19-tcp%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF/</guid>
      <description></description>
    </item>
    
    <item>
      <title>结构体-struct</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-18-%E7%BB%93%E6%9E%84%E4%BD%93-struct/</link>
      <pubDate>Fri, 18 Oct 2019 15:30:33 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-18-%E7%BB%93%E6%9E%84%E4%BD%93-struct/</guid>
      <description></description>
    </item>
    
    <item>
      <title>flag与pflag标准库的使用</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-15-flag%E4%B8%8Epflag%E6%A0%87%E5%87%86%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 15 Oct 2019 23:16:33 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-15-flag%E4%B8%8Epflag%E6%A0%87%E5%87%86%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;pflag 包的设计目的就是替代标准库中的 flag 包，因此它具有更强大的功能并且与标准的兼容性更好。本文将介绍 pflag 包与 flag 包相比的主要优势，&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go操作etc</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-15-go%E6%93%8D%E4%BD%9Cetcd/</link>
      <pubDate>Tue, 15 Oct 2019 19:14:08 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-15-go%E6%93%8D%E4%BD%9Cetcd/</guid>
      <description></description>
    </item>
    
    <item>
      <title>函数-闭包函数</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-14-%E5%87%BD%E6%95%B0-%E9%97%AD%E5%8C%85%E5%87%BD%E6%95%B0/</link>
      <pubDate>Mon, 14 Oct 2019 16:37:00 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-14-%E5%87%BD%E6%95%B0-%E9%97%AD%E5%8C%85%E5%87%BD%E6%95%B0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>go操作es</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-13-go%E6%93%8D%E4%BD%9Ces/</link>
      <pubDate>Sun, 13 Oct 2019 17:06:17 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-13-go%E6%93%8D%E4%BD%9Ces/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;​     前言：elasticsearch 是一个基于Lucene构建的开源的、分布式、restful接口的全文搜索引擎。es还是一个分布式的文档数据库，其中每个字段均可被索引，而且每个字段的数据均可被搜索。es扩展能力很强，可以扩展到几百台服务器以及处理PB级的数据。可以在短时间内存储、搜索和分析大量的数据。通常应用于复杂搜索场景情况下的核心发动机&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>go操作kafka</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-12-go%E6%93%8D%E4%BD%9Ckafka/</link>
      <pubDate>Sat, 12 Oct 2019 10:50:02 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-10-12-go%E6%93%8D%E4%BD%9Ckafka/</guid>
      <description></description>
    </item>
    
    <item>
      <title>http包中keepalive问题</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-09-29-http%E5%8C%85%E4%B8%ADkeepalive%E9%97%AE%E9%A2%98/</link>
      <pubDate>Sun, 29 Sep 2019 16:10:29 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-09-29-http%E5%8C%85%E4%B8%ADkeepalive%E9%97%AE%E9%A2%98/</guid>
      <description></description>
    </item>
    
    <item>
      <title>http客户端与服务端</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-09-18-http%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF/</link>
      <pubDate>Wed, 18 Sep 2019 19:27:08 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-09-18-http%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF/</guid>
      <description></description>
    </item>
    
    <item>
      <title>url标准库的使用</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-09-17-url%E6%A0%87%E5%87%86%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 17 Sep 2019 14:03:50 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-09-17-url%E6%A0%87%E5%87%86%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>golang 查看代码调用关系图</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-09-15-golang-%E6%9F%A5%E7%9C%8B%E4%BB%A3%E7%A0%81%E8%B0%83%E7%94%A8%E5%85%B3%E7%B3%BB%E5%9B%BE/</link>
      <pubDate>Sun, 15 Sep 2019 22:40:08 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-09-15-golang-%E6%9F%A5%E7%9C%8B%E4%BB%A3%E7%A0%81%E8%B0%83%E7%94%A8%E5%85%B3%E7%B3%BB%E5%9B%BE/</guid>
      <description>&lt;p&gt;go-callvis 是github上一个开源项目，可以用来查看golang代码调用关系。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>tail动态查看文件</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-09-11-tail%E5%8A%A8%E6%80%81%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6/</link>
      <pubDate>Wed, 11 Sep 2019 17:18:01 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-09-11-tail%E5%8A%A8%E6%80%81%E6%9F%A5%E7%9C%8B%E6%96%87%E4%BB%B6/</guid>
      <description>&lt;p&gt;&lt;strong&gt;动态查看文件内容&lt;/strong&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>ini解析</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-09-11-ini%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Wed, 11 Sep 2019 17:13:37 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-09-11-ini%E8%A7%A3%E6%9E%90/</guid>
      <description></description>
    </item>
    
    <item>
      <title>bufio标准库的使用</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-09-10-bufio%E6%A0%87%E5%87%86%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 10 Sep 2019 20:35:26 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-09-10-bufio%E6%A0%87%E5%87%86%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;Go语言的 bufio 包实现了带缓存的 I/O 操作, 使用起来还是很爽的, 主要涉及到下面一下函数:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;
&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;lnt&#34;&gt; 1
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 2
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 3
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 4
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 5
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 6
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 7
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 8
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt; 9
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;10
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;11
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;12
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;13
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;14
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;15
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;16
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;17
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;18
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;19
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;20
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;21
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;22
&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;23
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td class=&#34;lntd&#34;&gt;
&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;NewReader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;rd&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Reader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Reader&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;创建读缓冲区&lt;/span&gt; 
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;NewWriter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Writer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Writer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;创建写缓冲区&lt;/span&gt; 

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Reader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Peek&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;返回缓冲区前n字节&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;不移动读取指针&lt;/span&gt; 
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Reader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;读取数据到p中&lt;/span&gt; 
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Reader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ReadByte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;读取一个字节数据&lt;/span&gt; 
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Reader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;UnreadRune&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;将最后读取的一个字节数据设置为未读&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;下次仍然可以读取&lt;/span&gt; 
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Reader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Buffered&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;缓冲区中缓冲的还没有读取的数据&lt;/span&gt; 
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Reader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ReadRune&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;rune&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;读取一个字符&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;如中文字符&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;”&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;啊&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;”&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;可以直接读取&lt;/span&gt; 
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Reader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;UnreadRune&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;设置最后一次读的Rune未读&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;若最后一次不是ReadRune&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;返回error&lt;/span&gt; 
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Reader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ReadSlice&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;delim&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;读取数据直到遇到delim&lt;/span&gt; 
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Reader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ReadLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;isPrefix&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;读取一行数据&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;根据&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n或者&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;\&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt; 
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Reader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ReadBytes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;delim&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;读取delim之前的所有字节数据&lt;/span&gt; 
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Reader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ReadString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;delim&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;line&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;读取delim之前的所有string数据&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Writer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Flush&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;刷新数据&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;将缓冲区数据写入io&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;writer&lt;/span&gt; 
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Writer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Available&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;写缓冲区可用的空间&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;默认最大空间是4096&lt;/span&gt; 
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Writer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;WriteString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;写入一个string&lt;/span&gt; 
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Writer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;WriteByte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;写入一个Byte&lt;/span&gt; 
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Writer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;WriteRune&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;rune&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;size&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;写入一个字符&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;例如&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;’&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;你&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;’&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;或者&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;’&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;err&#34;&gt;’&lt;/span&gt; 
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Writer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;nn&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;写入一个字节数组&lt;/span&gt; 
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Reader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;WriteTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Writer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;WriteTo&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;实现了&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;WriterTo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Writer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ReadFrom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Reader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ReadFrom&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;实现了&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;io&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ReaderFrom&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt; &lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>http请求头类型详解</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-09-04-http%E8%AF%B7%E6%B1%82%E5%A4%B4%E7%B1%BB%E5%9E%8B%E8%AF%A6%E8%A7%A3/</link>
      <pubDate>Wed, 04 Sep 2019 21:05:08 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-09-04-http%E8%AF%B7%E6%B1%82%E5%A4%B4%E7%B1%BB%E5%9E%8B%E8%AF%A6%E8%A7%A3/</guid>
      <description></description>
    </item>
    
    <item>
      <title>文件操作</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-09-04-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Wed, 04 Sep 2019 14:31:35 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-09-04-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</guid>
      <description>&lt;p&gt;文件介绍&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go操作nsq</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-09-04-go%E6%93%8D%E4%BD%9Cnsq/</link>
      <pubDate>Wed, 04 Sep 2019 09:47:12 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-09-04-go%E6%93%8D%E4%BD%9Cnsq/</guid>
      <description></description>
    </item>
    
    <item>
      <title>go操作redis</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-09-03-go%E6%93%8D%E4%BD%9Credis/</link>
      <pubDate>Tue, 03 Sep 2019 08:57:30 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-09-03-go%E6%93%8D%E4%BD%9Credis/</guid>
      <description></description>
    </item>
    
    <item>
      <title>单元测试与基准测试</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-28-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E4%B8%8E%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/</link>
      <pubDate>Wed, 28 Aug 2019 19:29:00 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-28-%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E4%B8%8E%E5%9F%BA%E5%87%86%E6%B5%8B%E8%AF%95/</guid>
      <description></description>
    </item>
    
    <item>
      <title>pprof调试</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-28-pprof%E8%B0%83%E8%AF%95/</link>
      <pubDate>Wed, 28 Aug 2019 19:28:08 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-28-pprof%E8%B0%83%E8%AF%95/</guid>
      <description>&lt;p&gt;&lt;strong&gt;性能调优&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;在计算机性能调试领域里，profiling 是指对应用程序的画像，画像就是应用程序使用 CPU 和内存的情况。 Go语言是一个对性能特别看重的语言，因此语言中自带了 profiling 的库，这篇文章就要讲解怎么在 golang 中做 profiling。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>go调用系统命令打开对应资源</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-28-go%E8%B0%83%E7%94%A8%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4%E6%89%93%E5%BC%80%E5%AF%B9%E5%BA%94%E8%B5%84%E6%BA%90/</link>
      <pubDate>Wed, 28 Aug 2019 09:05:20 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-28-go%E8%B0%83%E7%94%A8%E7%B3%BB%E7%BB%9F%E5%91%BD%E4%BB%A4%E6%89%93%E5%BC%80%E5%AF%B9%E5%BA%94%E8%B5%84%E6%BA%90/</guid>
      <description></description>
    </item>
    
    <item>
      <title>课后作业</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-27-%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A/</link>
      <pubDate>Tue, 27 Aug 2019 12:33:07 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-27-%E8%AF%BE%E5%90%8E%E4%BD%9C%E4%B8%9A/</guid>
      <description></description>
    </item>
    
    <item>
      <title>fmt标准库的使用</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-20-fmt%E6%A0%87%E5%87%86%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Tue, 20 Aug 2019 20:54:15 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-20-fmt%E6%A0%87%E5%87%86%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>udp客户端与服务端</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-20-udp%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF/</link>
      <pubDate>Tue, 20 Aug 2019 20:37:01 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-20-udp%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%8E%E6%9C%8D%E5%8A%A1%E7%AB%AF/</guid>
      <description></description>
    </item>
    
    <item>
      <title>数据类型-练习题</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-19-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E7%BB%83%E4%B9%A0%E9%A2%98/</link>
      <pubDate>Mon, 19 Aug 2019 19:44:27 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-19-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B-%E7%BB%83%E4%B9%A0%E9%A2%98/</guid>
      <description></description>
    </item>
    
    <item>
      <title>运算符</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-19-%E8%BF%90%E7%AE%97%E7%AC%A6/</link>
      <pubDate>Mon, 19 Aug 2019 19:43:21 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-19-%E8%BF%90%E7%AE%97%E7%AC%A6/</guid>
      <description></description>
    </item>
    
    <item>
      <title>strings标准库的使用</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-18-strings%E6%A0%87%E5%87%86%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 18 Aug 2019 20:35:33 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-18-strings%E6%A0%87%E5%87%86%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>log标准库的使用</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-04-log%E6%A0%87%E5%87%86%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 04 Aug 2019 14:27:35 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-04-log%E6%A0%87%E5%87%86%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>runtime标准库的使用</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-04-runtime%E6%A0%87%E5%87%86%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Sun, 04 Aug 2019 13:26:20 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-04-runtime%E6%A0%87%E5%87%86%E5%BA%93%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description></description>
    </item>
    
    <item>
      <title>函数-内置函数</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-04-%E5%87%BD%E6%95%B0-%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sun, 04 Aug 2019 12:42:41 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-04-%E5%87%BD%E6%95%B0-%E5%86%85%E7%BD%AE%E5%87%BD%E6%95%B0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>函数-递归函数</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-04-%E5%87%BD%E6%95%B0-%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sun, 04 Aug 2019 12:40:52 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-04-%E5%87%BD%E6%95%B0-%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>函数-匿名函数</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-04-%E5%87%BD%E6%95%B0-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/</link>
      <pubDate>Sun, 04 Aug 2019 12:40:46 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-04-%E5%87%BD%E6%95%B0-%E5%8C%BF%E5%90%8D%E5%87%BD%E6%95%B0/</guid>
      <description></description>
    </item>
    
    <item>
      <title>指针类型</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-04-%E6%8C%87%E9%92%88%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sun, 04 Aug 2019 12:40:21 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-04-%E6%8C%87%E9%92%88%E7%B1%BB%E5%9E%8B/</guid>
      <description></description>
    </item>
    
    <item>
      <title>数组和切片</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-04-%E6%95%B0%E7%BB%84%E5%92%8C%E5%88%87%E7%89%87/</link>
      <pubDate>Sun, 04 Aug 2019 12:40:18 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-04-%E6%95%B0%E7%BB%84%E5%92%8C%E5%88%87%E7%89%87/</guid>
      <description></description>
    </item>
    
    <item>
      <title>基本数据类型</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-04-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sun, 04 Aug 2019 12:40:10 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-04-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</guid>
      <description></description>
    </item>
    
    <item>
      <title>流程控制</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-04-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</link>
      <pubDate>Sun, 04 Aug 2019 12:39:43 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-04-%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6/</guid>
      <description></description>
    </item>
    
    <item>
      <title>类型别名和自定义类型</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-03-%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B/</link>
      <pubDate>Sat, 03 Aug 2019 22:24:04 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-03-%E7%B1%BB%E5%9E%8B%E5%88%AB%E5%90%8D%E5%92%8C%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B/</guid>
      <description></description>
    </item>
    
    <item>
      <title>结构体作业</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-03-%E7%BB%93%E6%9E%84%E4%BD%93%E4%BD%9C%E4%B8%9A/</link>
      <pubDate>Sat, 03 Aug 2019 22:23:55 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-03-%E7%BB%93%E6%9E%84%E4%BD%93%E4%BD%9C%E4%B8%9A/</guid>
      <description></description>
    </item>
    
    <item>
      <title>包嵌套</title>
      <link>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-03-%E5%8C%85%E5%B5%8C%E5%A5%97/</link>
      <pubDate>Sat, 03 Aug 2019 22:21:46 +0800</pubDate>
      
      <guid>https://qixiang-liu.github.io/post/golang%E7%AC%94%E8%AE%B0/2019-08-03-%E5%8C%85%E5%B5%8C%E5%A5%97/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>